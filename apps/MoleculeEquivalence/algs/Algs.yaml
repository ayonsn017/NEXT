initExp:
  args:
    pretest_count:
      description: Number of pretest questions to show to the participant.
      type: num
    training_count:
      description: Number of training questions to show to the participant.
      type: num
    posttest_count:
      description: Number of posttest questions to show to the participant.
      type: num
    alg_list:
      description: A tuple of dictionaries containing information regarding all the algorithms
      type: str
  rets:
    type: bool
    description: A boolean indicating success
    values: true


getQuery:
  args:
    participant_uid:
      description: The id of the participant for whom the question is generated
      type: string
  rets:
    description: The molecule question to ask about
    type: tuple
    values:
      0:
        type: string
        description: The key for the first molecule in representation
      1:
        type: string
        description: The key for the second molecule in representation
      2:
        type: num
        description: 1 or 0, identifies if the two molecules are the same or not 
      3:
        type: string
        description: pretest, training or posttest identifying which type of question it is
        
      
processAnswer:
    args:
      center_id:
        description: The ID of the center target
        type: num
      left_id: 
        description: The ID of the left target
        type: num
      right_id: 
        description: The ID of the right target
        type: num
      target_winner:
        description: The ID of the target that won the given query.
        type: num
    rets:
      type: bool
      description: A boolean indicating success
      values: true

getModel:
  rets:
    type: dict
    description: The current state of the model
    values:
      X:
        description: The embedding
        type: stuff
      num_reported_answers:
        description: How many answers have been reported (for this algorithm)
        type: num
